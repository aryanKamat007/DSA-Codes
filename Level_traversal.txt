#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    int level;
    struct Node* left;
    struct Node* right;
};

struct Node* createNode(int data, int level) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->level = level;
    newNode->left = newNode->right = NULL;
    return newNode;
}

struct Node* insertNode(struct Node* root, int data, int level) {
    if (root == NULL) {
        return createNode(data, level);
    }

    if (data < root->data) {
        root->left = insertNode(root->left, data, level + 1);
    } else if (data > root->data) {
        root->right = insertNode(root->right, data, level + 1);
    }

    return root;
}


void levelOrderTraversal(struct Node* root) {
    if (root == NULL) {
        return;
    }


    struct Node** queue = (struct Node**)malloc(sizeof(struct Node*));
    int front = 0, rear = 0;
    queue[rear] = root;

    while (front <= rear) {
        struct Node* currentNode = queue[front++];
        printf("Node: %d, Level: %d\n", currentNode->data, currentNode->level);

        if (currentNode->left != NULL) {
            queue = (struct Node**)realloc(queue, (rear + 2) * sizeof(struct Node*));
            currentNode->left->level = currentNode->level + 1;
            queue[++rear] = currentNode->left;
        }

        if (currentNode->right != NULL) {
            queue = (struct Node**)realloc(queue, (rear + 2) * sizeof(struct Node*));
            currentNode->right->level = currentNode->level + 1;
            queue[++rear] = currentNode->right;
        }
    }

    free(queue);
}

int main() {
    struct Node* root = NULL;
    int n, data;

    printf("Enter the number of nodes in the binary search tree: ");
    scanf("%d", &n);

    printf("Enter the values of the nodes:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &data);
        if (i == 0) {
            root = insertNode(root, data, 0);
        } else {
            insertNode(root, data, 0);
        }
    }

    printf("Level-order traversal:\n");
    levelOrderTraversal(root);

    return 0;
}
